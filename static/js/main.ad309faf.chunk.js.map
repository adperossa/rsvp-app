{"version":3,"sources":["components/AgregarInvitado.js","components/Header.js","components/Filtro.js","components/Contador.js","components/InvitadoPendiente.js","components/Invitado.js","components/ListaInvitados.js","components/ControlesCache.js","components/Main.js","App.js","index.js"],"names":["AgregarInvitado","props","onSubmit","event","handleAgregarInvitado","type","value","invitadoPorAgregar","placeholder","onChange","handleChange","name","Header","agregarInvitado","inputInvitadoPorAgregar","Filtro","checked","filtrando","toggleFiltro","Contador","porcentaje","Math","round","confirmados","total","className","sinConfirmar","InvitadoPendiente","nombre","Invitado","confirmado","editando","handleCambiarConfirmacion","handleCambiarEdicion","handleEditarNombre","handleEliminarInvitado","onKeyPress","e","key","onClick","ListaInvitados","invitados","map","invitado","index","toggleConfirmacion","toggleEdicion","cambiarNombre","target","eliminarInvitado","ControlesCache","borrarLocalStorage","Main","window","localStorage","rsvp_cachelocal","App","guardarStatePersistente","stateToSave","JSON","stringify","state","cargarStatePersistente","cachedState","parse","clear","setState","baseState","getTotalInvitados","length","getConfirmados","reduce","acc","togglePropiedad","propiedad","prevState","invitadosArray","preventDefault","filter","console","warn","addEventListener","this","removeEventListener","invitadosTotales","invitadosConfirmados","invitadosSinConfirmar","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad309faf.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AgregarInvitado = props => (\r\n  <form onSubmit={(event) => props.handleAgregarInvitado(event)}>\r\n    <input type=\"text\" value={props.invitadoPorAgregar} placeholder=\"Agregar Invitado\" onChange={(event) => props.handleChange(event)}/>\r\n    <button type=\"submit\" name=\"submit\" value=\"submit\">Agregar</button>\r\n  </form>\r\n)\r\n\r\nAgregarInvitado.propTypes = {\r\n  handleAgregarInvitado: PropTypes.func.isRequired,\r\n  invitadoPorAgregar: PropTypes.string.isRequired,\r\n  handleChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AgregarInvitado;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AgregarInvitado from './AgregarInvitado';\r\n\r\nconst Header = props => (\r\n  <header>\r\n    <h1>RSVP</h1>\r\n    <p>Simple app para organizar reuniones.</p>\r\n    <AgregarInvitado \r\n      invitadoPorAgregar={props.invitadoPorAgregar}\r\n      handleAgregarInvitado={props.agregarInvitado}\r\n      handleChange={props.inputInvitadoPorAgregar}\r\n    />\r\n  </header>\r\n)\r\n\r\nHeader.propTypes = {\r\n  invitadoPorAgregar: PropTypes.string.isRequired,\r\n  agregarInvitado: PropTypes.func.isRequired,\r\n  inputInvitadoPorAgregar: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Filtro = props => (\r\n  <label>\r\n    <input \r\n      type=\"checkbox\"\r\n      checked={props.filtrando}\r\n      onChange={props.toggleFiltro} /> Ocultar los que no han respondido\r\n  </label>\r\n)\r\n\r\nFiltro.propTypes = {\r\n  filtrando: PropTypes.bool.isRequired,\r\n  toggleFiltro: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Filtro;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Contador = props => {\r\n  const porcentaje = Math.round((props.confirmados * 100) / props.total) + ' %';\r\n\r\n  return (\r\n    <table className=\"counter\">\r\n      <tbody>\r\n        <tr>\r\n          <td>Asistir&aacute;n:</td>\r\n          <td>{props.confirmados}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Sin confirmar:</td>\r\n          <td>{props.sinConfirmar}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Total:</td>\r\n          <td>{props.total}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Presentismo:</td>\r\n          <td>{props.total > 0 ? porcentaje : '---'}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nContador.propTypes = {\r\n  confirmados: PropTypes.number.isRequired,\r\n  sinConfirmar: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default Contador;","import React from 'react';\r\nimport PropTypes from 'proptypes';\r\n\r\nconst InvitadoPendiente = (props) => {\r\n  if (props.nombre) {\r\n    return (\r\n    <li className='pendiente'>\r\n      <span>{props.nombre}</span>\r\n    </li>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nInvitadoPendiente.propTypes = {\r\n  nombre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default InvitadoPendiente;","import React from 'react';\r\nimport PropTypes from 'proptypes';\r\n\r\nconst Invitado = ({ \r\n  nombre,\r\n  confirmado,\r\n  editando, \r\n  handleCambiarConfirmacion, \r\n  handleCambiarEdicion, \r\n  handleEditarNombre, \r\n  handleEliminarInvitado }) => (\r\n    <li className={ confirmado ? 'confirmado' : 'pendiente' }>\r\n      { editando ?\r\n          <input type=\"text\" value={nombre} onChange={handleEditarNombre} onKeyPress={e => e.key === 'Enter' ? handleCambiarEdicion() : null} />\r\n        :\r\n          <span>{nombre}</span>\r\n      }\r\n      <label>\r\n        <input \r\n          type=\"checkbox\" \r\n          checked={confirmado}\r\n          onChange={handleCambiarConfirmacion} /> Asistir&aacute;\r\n      </label>\r\n      <button onClick={handleCambiarEdicion}>\r\n        {editando ? 'guardar' : 'editar'}\r\n      </button>\r\n      <button  onClick={handleEliminarInvitado}>eliminar</button>\r\n    </li>\r\n  );\r\n\r\nInvitado.propTypes = {\r\n  confirmado: PropTypes.bool.isRequired,\r\n  editando: PropTypes.bool.isRequired,\r\n  nombre: PropTypes.string.isRequired,\r\n  handleCambiarConfirmacion: PropTypes.func.isRequired,\r\n  handleCambiarEdicion: PropTypes.func.isRequired,\r\n  handleEditarNombre: PropTypes.func.isRequired,\r\n  handleEliminarInvitado: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Invitado;","import React from \"react\";\r\nimport PropTypes from 'proptypes';\r\nimport InvitadoPendiente from './InvitadoPendiente'\r\nimport Invitado from './Invitado';\r\n\r\nconst ListaInvitados = props => (\r\n  <ul>\r\n    <InvitadoPendiente nombre={props.invitadoPorAgregar} />\r\n    { props.invitados.map( (invitado, index) => {\r\n\r\n      if (!props.filtrando || invitado.confirmado) return (\r\n        <Invitado\r\n          key={index}\r\n          confirmado={invitado.confirmado}\r\n          editando={invitado.editando}\r\n          nombre={invitado.nombre}\r\n          handleCambiarConfirmacion={() => props.toggleConfirmacion(index)}\r\n          handleCambiarEdicion={() => props.toggleEdicion(index)}\r\n          handleEditarNombre={e => props.cambiarNombre(index, e.target.value)}\r\n          handleEliminarInvitado={() => props.eliminarInvitado(index)}\r\n        />\r\n      )\r\n\r\n      //agregar un return sin efecto solo para que eslint no emita un warning\r\n      return false;\r\n\r\n    })}\r\n  </ul>\r\n)\r\n\r\nListaInvitados.propTypes = {\r\n  invitados: PropTypes.array.isRequired,\r\n  filtrando: PropTypes.bool.isRequired,\r\n  toggleConfirmacion: PropTypes.func.isRequired,\r\n  toggleEdicion: PropTypes.func.isRequired,\r\n  cambiarNombre: PropTypes.func.isRequired,\r\n  eliminarInvitado: PropTypes.func.isRequired,\r\n  invitadoPorAgregar: PropTypes.string.isRequired\r\n}\r\n\r\nexport default ListaInvitados;","import React from 'react';\r\n\r\nconst ControlesCache = (props) => (\r\n  <div className=\"container-cache\">\r\n    <p className=\"aviso-cache\">Usando almacenamiento local</p>\r\n    <button className=\"boton-eliminar-cache\" onClick={props.borrarLocalStorage}>borrar datos</button>\r\n  </div>\r\n);\r\n\r\nexport default ControlesCache;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Filtro from './Filtro';\r\nimport Contador from './Contador';\r\nimport ListaInvitados from './ListaInvitados';\r\nimport ControlesCache from './ControlesCache';\r\n\r\nconst Main = props => (\r\n  <div className=\"main\">\r\n    <div>\r\n      <h2>Invitados</h2>\r\n      <Filtro \r\n        filtrando={props.filtrando}\r\n        toggleFiltro={props.toggleFiltro}\r\n      />\r\n    </div>\r\n    <Contador \r\n      confirmados={props.confirmados}\r\n      sinConfirmar={props.sinConfirmar}\r\n      total={props.total}\r\n    />\r\n    <ListaInvitados \r\n      invitados={props.invitados}\r\n      filtrando={props.filtrando}\r\n      toggleConfirmacion={props.toggleConfirmacion}\r\n      toggleEdicion={props.toggleEdicion}\r\n      cambiarNombre={props.cambiarNombre}\r\n      eliminarInvitado={props.eliminarInvitado}\r\n      invitadoPorAgregar={props.invitadoPorAgregar}\r\n    />\r\n    { \r\n      window.localStorage.rsvp_cachelocal ?\r\n        <ControlesCache borrarLocalStorage={props.borrarLocalStorage} />\r\n      :\r\n        null       \r\n    }\r\n  </div>\r\n)\r\n\r\nMain.propTypes = {\r\n  filtrando: PropTypes.bool.isRequired,\r\n  toggleFiltro: PropTypes.func.isRequired,\r\n  confirmados: PropTypes.number.isRequired,\r\n  sinConfirmar: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  invitados: PropTypes.array.isRequired,\r\n  toggleConfirmacion: PropTypes.func.isRequired,\r\n  toggleEdicion: PropTypes.func.isRequired,\r\n  cambiarNombre: PropTypes.func.isRequired,\r\n  eliminarInvitado: PropTypes.func.isRequired,\r\n  invitadoPorAgregar: PropTypes.string.isRequired,\r\n  borrarLocalStorage: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Main;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Main from './components/Main';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    \n    // Como es una aplicación muy simple, acumulo todo el state en el componente raiz.\n    // De aumentar la complejidad convendría convertir algunos comp funcionales en clases con su propio state y\n    // manejar localmente variables como la usada para el filtro, o el estado de 'editando' el nombre en cada Invitado\n    // TODO: utilizar ID unico para cada invitado en lugar del index\n\n    // almacenar el mock de state basico \n    this.baseState = { \n      invitados: [\n        {\n          nombre: 'Juan',\n          confirmado: false,\n          editando: false\n        },\n        {\n          nombre: 'Pedro',\n          confirmado: true,\n          editando: false\n        },\n        {\n          nombre: 'Tony',\n          confirmado: true,\n          editando: false\n        }\n      ],\n      filtrando: false,\n      invitadoPorAgregar: ''\n    };\n\n    // verificar si ya hay un state en localstorage y cargarlo...\n    if (window.localStorage.rsvp_cachelocal) {\n      this.cargarStatePersistente();\n      console.warn('RSVP App - Utilizando almacenamiento local');\n    } else {\n      //o sino, inicializar el state con el mock anterior\n      this.state = this.baseState;\n    }\n  }\n  \n  // comienzan metodos para manejar el localStorage\n\n  guardarStatePersistente = () => {\n    // convertir en jsonstring el state actual y guardarlo en localstorage\n    const stateToSave = JSON.stringify(this.state);\n    window.localStorage.state = stateToSave;\n    // marcar que dejamos un state persistente de la app\n    window.localStorage.rsvp_cachelocal = true;\n  }\n\n  cargarStatePersistente = () => {\n    const cachedState = JSON.parse(window.localStorage.state);\n    this.state = cachedState;\n  }\n\n  borrarLocalStorage = () => {\n    window.localStorage.rsvp_cachelocal = false;\n    window.localStorage.clear();\n    this.setState({\n      ...this.baseState\n    });\n  }\n\n  componentDidMount() {\n    //agregamos un listener para manejar los casos en que la pagina se actualice manualmente\n    //o el usuario cierre el browser, ya que componentWillUnmount no se dispara en esos casos\n    window.addEventListener('beforeunload', this.guardarStatePersistente);\n  }\n\n  componentWillUnmount() {\n    //guardamos el state actual\n    this.guardarStatePersistente();\n    //quitar el eventlistener de beforeunload\n    window.removeEventListener('beforeunload', this.guardarStatePersistente);\n  }\n\n  // fin metodos localStorage\n\n\n  \n  // metodos helper para el contador\n  getTotalInvitados = () => this.state.invitados.length;\n  getConfirmados = () => this.state.invitados.reduce(\n    (acc, invitado) => invitado.confirmado ? acc + 1 : acc\n  , 0)\n\n  /**\n   * Activa/desactiva la variable del filtro de invitados confirmados\n   */\n  toggleFiltro = () => {\n    this.setState({\n      filtrando: !this.state.filtrando\n    })\n  }\n\n  /**\n   * Cambia una propiedad bool de un invitado en su opuesto\n   * @param {number} index Indice del invitado en el array\n   * @param {boolean} propiedad Propiedad a cambiar\n   */\n  togglePropiedad = (index, propiedad) => {\n    this.setState((prevState) => {\n\n      const invitadosArray = prevState.invitados;\n      invitadosArray[index][propiedad] = !invitadosArray[index][propiedad];\n\n      return ({\n        invitados: invitadosArray\n      })\n      \n    })\n  }\n\n  // Funciones utilitarias, llaman a togglePropiedad con cada caso en particular.\n  // Desagregadas de togglePropiedad para abstraer funcionalidad, mantener compartimentalizacion\n  // y mejorar mantenimiento\n  toggleConfirmacion = index => {\n    this.togglePropiedad(index, 'confirmado');\n  }\n  toggleEdicion = index => {\n    this.togglePropiedad(index, 'editando');\n  }\n\n  //fin utilitarias\n\n  /**\n   * Cambia el nombre de un invitado\n   * @todo refactorizar funciones para una func changeState general\n   * @param {number} index Indice del invitado en el array\n   * @param {string} nombre Nombre del invitado\n   */\n  cambiarNombre = (index, nombre) => {\n    this.setState((prevState) => {\n      const invitadosArray = prevState.invitados;\n      invitadosArray[index].nombre = nombre;\n\n      return ({\n        invitados: invitadosArray\n      })\n      \n    })\n  }\n\n  /**\n   * Agrega un nuevo invitado al array.\n   * @param {Object} event El evento onSubmit pasado desde el componente de \n   * agregar invitados, usado para preventDefault\n   */\n  agregarInvitado = event => {\n    event.preventDefault();\n      \n    this.setState(prevState => ({\n      invitados: [ \n        {\n          nombre: this.state.invitadoPorAgregar,\n          confirmado: false,\n          editando: false\n        },\n        ...prevState.invitados\n      ],\n      invitadoPorAgregar: ''\n    }))\n  }\n  \n  /**\n   * maneja el state del input del componente hijo AgregarInvitado\n   * @param {Object} event El evento onChange del input\n   */\n  inputInvitadoPorAgregar = event => {\n    this.setState({\n      invitadoPorAgregar: event.target.value\n    });\n  }\n  \n  /**\n   * Borra a un invitado del array basandose en el index recibido\n   * @param {number} index El indice correspondiente al invitado a borrar\n   */\n  eliminarInvitado = index => {\n    this.setState(prevState => {\n      const newInvitados = prevState.invitados.filter( invitado => prevState.invitados[index] !== invitado);\n      return ({\n        invitados: newInvitados\n      })\n    })\n  }\n\n  /* \n  // mismo método pero usando slice\n  eliminarInvitado = index => {\n    this.setState(prevState => ({ \n      invitados: [\n        ...prevState.invitados.slice(0, index),\n        ...prevState.invitados.slice(index + 1)\n      ]\n       }))\n  }\n  */\n\n  render() {\n    //calcular los datos para el contador\n    const invitadosTotales = this.getTotalInvitados();\n    const invitadosConfirmados = this.getConfirmados();\n    const invitadosSinConfirmar = invitadosTotales - invitadosConfirmados;\n\n    return (\n      <div className=\"App\">\n        <Header \n          invitadoPorAgregar={this.state.invitadoPorAgregar}\n          agregarInvitado={this.agregarInvitado}\n          inputInvitadoPorAgregar={this.inputInvitadoPorAgregar}\n        />\n        <Main \n          filtrando={this.state.filtrando}\n          toggleFiltro={this.toggleFiltro}\n          confirmados={invitadosConfirmados}\n          sinConfirmar={invitadosSinConfirmar}\n          total={invitadosTotales}\n          invitados={this.state.invitados}\n          toggleConfirmacion={this.toggleConfirmacion}\n          toggleEdicion={this.toggleEdicion}\n          cambiarNombre={this.cambiarNombre}\n          eliminarInvitado={this.eliminarInvitado}\n          invitadoPorAgregar={this.state.invitadoPorAgregar}\n          borrarLocalStorage={this.borrarLocalStorage}\n        />\n      </div>\n    );\n\n  }\n\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}